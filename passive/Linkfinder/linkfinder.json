{
  "description": "",
  "edition": 2,
  "graph": {
    "edges": [
      {
        "source": {
          "exec_alias": "exec",
          "node_id": 4
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 1
        }
      },
      {
        "source": {
          "exec_alias": "exec",
          "node_id": 3
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 5
        }
      },
      {
        "source": {
          "exec_alias": "true",
          "node_id": 5
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 4
        }
      }
    ],
    "nodes": [
      {
        "alias": "passive_end",
        "definition_id": "caido/passive-end",
        "display": {
          "x": 290,
          "y": 300
        },
        "id": 1,
        "inputs": [],
        "name": "Passive End",
        "version": "0.1.0"
      },
      {
        "alias": "on_intercept_response",
        "definition_id": "caido/on-intercept-response",
        "display": {
          "x": 280,
          "y": -170
        },
        "id": 3,
        "inputs": [],
        "name": "On Intercept Response",
        "version": "0.1.0"
      },
      {
        "alias": "javascript",
        "definition_id": "caido/http-code-js",
        "display": {
          "x": 280,
          "y": 160
        },
        "id": 4,
        "inputs": [
          {
            "alias": "request",
            "value": {
              "data": "$on_intercept_response.request",
              "kind": "ref"
            }
          },
          {
            "alias": "response",
            "value": {
              "data": "$on_intercept_response.response",
              "kind": "ref"
            }
          },
          {
            "alias": "code",
            "value": {
              "data": "async function run(input, sdk) {\n  const { request, response } = input;\n\n  const responseBody = response.getBody()?.toText();\n  if (!responseBody) {\n    sdk.console.log(\"response body is empty\");\n    return;\n  }\n\n  const regex = /(?:\"|')(((?:[a-zA-Z]{1,10}:\\/\\/|\\/\\/)[^\"'/]{1,}\\.[a-zA-Z]{2,}[^\"']{0,})|((?:\\/|\\.\\.\\/|\\.\\.\\/)[^\"'><,;| *()(%%$^\\/\\\\\\[\\]][^\"'><,;|()]{1,})|([a-zA-Z0-9_\\-\\/]{1,}\\/[a-zA-Z0-9_\\-\\/]{1,}\\.(?:[a-zA-Z]{1,4}|action)(?:[\\?|#][^\"|']{0,}|))|([a-zA-Z0-9_\\-\\/]{1,}\\/[a-zA-Z0-9_\\-\\/]{3,}(?:[\\?|#][^\"|']{0,}|))|([a-zA-Z0-9_\\-]{1,}\\.(?:php|asp|aspx|jsp|json|action|html|js|txt|xml)(?:[\\?|#][^\"|']{0,}|)))(?:\"|')/g;\n\n  const matches = responseBody.match(regex);\n\n  if (matches) {\n    const uniqueMatches = new Set(\n      matches\n        .map((match) => match.replace(/\"/g, \"\"))\n        .filter((match) => !match.includes(\"http://www.w3.org/2000/svg\"))\n    );\n\n    if (uniqueMatches.size > 0) {\n      const paths = Array.from(uniqueMatches);\n      sdk.console.log(`Found ${paths.length} unique path(s):`);\n      paths.forEach((path) => {\n        sdk.console.log(path);\n      });\n\n      const findingDescription = `The following paths were found:\\n\\n${paths.join(\"\\n\")}`;\n      await sdk.findings.create({\n        title: \"Paths Found\",\n        reporter: \"Linkfinder\",\n        request: request,\n        description: findingDescription,\n        severity: \"info\",\n      });\n\n      return paths;\n    } else {\n      sdk.console.log(\"No paths found\");\n      return [];\n    }\n  } else {\n    sdk.console.log(\"No paths found\");\n    return [];\n  }\n}\n\nexport { run };",
              "kind": "string"
            }
          }
        ],
        "name": "Javascript",
        "version": "0.1.0"
      },
      {
        "alias": "in_scope",
        "definition_id": "caido/in-scope",
        "display": {
          "x": 280,
          "y": 20
        },
        "id": 5,
        "inputs": [
          {
            "alias": "request",
            "value": {
              "data": "$on_intercept_response.request",
              "kind": "ref"
            }
          }
        ],
        "name": "In Scope",
        "version": "0.1.0"
      }
    ]
  },
  "id": "fb159112-a283-487b-b30c-f5813b3dda2e",
  "kind": "passive",
  "name": "Link Finder"
}
